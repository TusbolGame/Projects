/**
 * 
 */
package com.lvairductcare.app.service;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.lvairductcare.app.model.CalendarData;
import com.lvairductcare.app.repository.CalendarDataRepository;
import com.ticketadvantage.services.email.SendText;
import com.ticketadvantage.services.email.ticketadvantage.TicketAdvantageGmailOath;

/**
 * @author jmiller
 *
 */
@RequestMapping(path="/restapi")
@RestController
@Service
public class CalendarRestController {
	private static final Logger LOGGER = LogManager.getLogger(CalendarRestController.class);
	private static final TicketAdvantageGmailOath TICKETADVANTAGEGMAILOATH = new TicketAdvantageGmailOath();

	@Autowired 
    // Which is auto-generated by Spring, we will use it to handle the data
	private CalendarDataRepository calendarEventRepository;

	/**
	 * 
	 */
	public CalendarRestController() {
		super();
		LOGGER.debug("Entering CalendarRestController()");
		LOGGER.debug("Exiting CalendarRestController()");
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
	}

	/**
	 * 
	 * @param calendardata
	 */
	@PutMapping(path="/save", consumes={MediaType.APPLICATION_JSON_VALUE})
	public String save(@RequestBody CalendarData calendardata) {
		LOGGER.info("Entering save()");
		LOGGER.error("calendardata: " + calendardata);
		String outcome = "success";

		try {
			// Save the data
			calendarEventRepository.save(calendardata);
			
			final SendText sendText = new SendText();
			sendText.setOAUTH2_TOKEN(TICKETADVANTAGEGMAILOATH.getAccessToken());
			sendText.sendTextWithMessage("9132195234@vtext.com", "LV Air Duct contact: " + calendardata.getPhone());
			sendText.sendTextWithMessage("contact@lvairductcare.com", calendardata.toString());
		} catch (Throwable t) {
			LOGGER.error(t.getMessage(), t);

			try {
				final SendText sendText = new SendText();
				sendText.setOAUTH2_TOKEN(TICKETADVANTAGEGMAILOATH.getAccessToken());
				sendText.sendTextWithMessage("9132195234@vtext.com", "Error: " + calendardata);
			} catch (Throwable tt) {
				LOGGER.error(tt.getMessage(), tt);
			}

			outcome = "Problem saving appointment";
		}

		LOGGER.info("Exiting save()");
		return outcome;
	}

	/**
	 * 
	 * @param calendardata
	 */
	@DeleteMapping(path="/delete", consumes={MediaType.APPLICATION_JSON_VALUE})
	public void delete(@RequestParam(required=true) Long id) {
		LOGGER.info("Entering delete()");

		try {
			final CalendarData calendardata = new CalendarData();
			calendardata.setId(id);

			// Delete the data
			calendarEventRepository.delete(calendardata);
		} catch (Throwable t) {
			LOGGER.error(t.getMessage(), t);
		}

		LOGGER.info("Exiting delete()");
	}

	/**
	 * 
	 * @param day
	 * @return
	 */
	@GetMapping(path="/findbyday", produces={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})
	public @ResponseBody List<CalendarData> findbyday(@RequestParam(required=true) String day) {
		LOGGER.info("Entering findbyday()");
		LOGGER.debug("day: " + day);

		int index = day.indexOf("T");
		if (index != -1) {
			day = day.substring(0, index);
		}

		final List<CalendarData> calendars = calendarEventRepository.findByAppointmentday(day);
		LOGGER.debug("calendars: " + calendars);

		LOGGER.info("Exiting findbyday()");
		return calendars;
	}

	/**
	 * 
	 * @param phone
	 * @return
	 */
	@GetMapping(path="/findbyphone", produces={MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE})
	public @ResponseBody List<CalendarData> findbyphone(@RequestParam(required=true) String phone) {
		LOGGER.info("Entering findbyphone()");

		final List<CalendarData> calendars = calendarEventRepository.findByPhone(phone);

		LOGGER.info("Exiting findbyphone()");
		return calendars;
	}
}